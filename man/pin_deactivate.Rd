% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pin_deactivate.R
\name{pin_deactivate}
\alias{pin_deactivate}
\title{Pin deactivate}
\usage{
pin_deactivate(
board,
name,
force,
...)
}
\arguments{
\item{board}{A pins board object from board_rsconnect()}

\item{server}{URL of the board server. It's recommended to store these details in .Renviron and use Sys.getenv()}

\item{key}{API key to access the board. It's recommended to store these details in .Renviron and use Sys.getenv()}

\item{name}{Name of pin to be read}

\item{force}{Whether to bypass confirmation messages on console}
}
\value{
Specified pin will be deleted but backed up in pin_pit
}
\description{
"Softly" deactivates a pin by transferring its data to a temporary pin scheduled for deletion.
}
\examples{
# Basic usage, assuming .Renviron is set up with CONNECT_SERVER and CONNECT_API_SERVER environmental variables:
library(kingpin)
board <- kingpin::board_rsconnect(server = Sys.getenv("CONNECT_SERVER"), key = Sys.getenv("CONNECT_API_KEY"))

# Pin something temporary first
kingpin::pin_throw(board, data.frame(a = 1:10, b = 1:10), "temp")

# Retrieve pin
kingpin::pin_deactivate(board,
server = Sys.getenv("CONNECT_SERVER"),
key = Sys.getenv("CONNECT_API_KEY"),
name = "temp")

# To check if the pin has been backed up in pin_pit:
 kingpin::pin_return(board, "pin_pit")

}

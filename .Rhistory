DT[Fruit != "apple", Cumsum := cumsum(Count)]
DT
DT <- data.table(reset())
DT[Fruit != "apple", Cumsum := cumsum(Count)]
DT
DT[Fruit != "apple", sum(Cumsum := cumsum(Count), na.rm = TRUE)]
DT <- data.table(reset())
DT[Fruit != "apple", Cumsum := cumsum(Count)]
DT
DT[Fruit != "apple", Cumsum := cumsum(Count)] |>
DT[, sum(Cumsum)]
DT <- data.table(reset())
DT[Fruit != "apple", Cumsum := cumsum(Count)]
DT[, sum(Cumsum)]
DT[, sum(Cumsum, na.rm = TRUE)]
DT_comp$Cumsum <- DT_comp[DT_comp$Fruit != "apple"]
DT_comp[DT_comp$Fruit != "apple"]
DT_comp[DT_comp$Fruit != "apple", ]
cumsum(DT_comp$Count[DT_comp$Fruit != "apple", ])
DT_comp$Count[DT_comp$Fruit != "apple", ]
DT_comp$Count[DT_comp$Fruit != "apple"]
DT_comp$Cumsum <- cumsum(DT_comp$Count[DT_comp$Fruit != "apple"])
# Task: to filter to apple, calculate the cumsum and assign to new column, then sum the cumsum column.
DT[Fruit != "apple", Cumsum := cumsum(Count)] # DATA.TABLE
DT[, sum(Cumsum, na.rm = TRUE)]
DT_comp %>%
filter(Fruit != "apple") %>%
mutate(Cumsum = cumsum(Count)) %>%
summarise(sum(Cumsum))
DT <- data.table(reset())
DT[, sum(Count), by = Fruit] # DATA.TABLE
View(DT)
DT %>%
group_by(Fruit) %>%
summarise(sum(Count))
# NOTE: the by argument seems to be a unique "third dimension" within the index operationfor example:
DT[Fruit != "orange", max(Count), by = Fruit]
# NOTE: the by argument seems to be a unique "third dimension" within the index operationfor example:
DT[Fruit != "orange", # filter first
Max := max(Count), #
by = Fruit] # group by
View(DT)
DT
DT <- data.table(reset())
DT[Fruit != "orange", # filter first
max(Count), # summarise
by = Fruit] # group by
# NOTE: the by argument seems to be a unique "third dimension" within the index operation for example:
DT[Fruit != "orange", # filter first
":="(Max = max(Count),
Cumsum = cumsum(Count)), # mutate
by = Fruit] # group by
DT
DT[Fruit %chin% c("apple", "orange")]
DT[Fruit %in% c("apple", "orange")]
DT[Year %nin% c(2008, 2010)]
DT[Year %nuin% c(2008, 2010)]
DT[Year %inin% c(2008, 2010)]
DT[Year %iin% c(2008, 2010)]
# Chaining commands vertically
DT[, by = Fruit,
MeanCountByFruit := round(mean(Count), 2)
][
MeanCountByFruit > 2
]
DT[, by = Fruit,
MeanCountByFruit := round(mean(Count), 2)
]
View(DT)
DT <- data.table(reset())
DT[Fruit != "apple", # filter out apples
by = Fruit, # create new column of means by Fruit
MeanCountByFruit := round(mean(Count), 2)
]
View(DT)
DT <- data.table(reset())
# Chaining commands vertically
DT[Fruit != "apple", # filter out apples
by = Fruit, # create new column of means by Fruit
MeanCountByFruit := round(mean(Count), 2)
][
MeanCountByFruit > 2 # further filtering
]
DT <- data.table(reset())
DT[, c("Year", "Cumsum_Count") :=
.(Year + 1, cumsum(Count))]{} # to add several at once
DT[, c("Year", "Cumsum_Count") :=
.(Year + 1, cumsum(Count))][] # to add several at once
DT <- data.table(reset())
DT[, .(SUM = sum(Count),
MAX = max(Year))]
DT[, plot(Year, Count)]
DT[, {sum_count <- sum(Count)
print("The sum of the Count column is:")
sum_count}]
DT[, {sum_count <- sum(Count)
print("The sum of the Count column is:")
sum_count}]
DT[, print(.SD), by = Fruit]
DT[1:2, 1:2] # indexing similar to base
DT <- data.table(Fruit = rep(c("banana", "apple", "orange"), 3:1),
Year  = c(2008, 2009, 2010, 2009, 2010, 2010),
Count = 1:6)
DT[1:2, 1:2] # indexing similar to base
DT[, Fruit] # DATA.TABLE: can omit quotation marks here
DT_comp[, "Fruit"] # BASE equivalent
pull(DT_comp, Fruit) # DPLYR equivalent
DT[Fruit == "orange"] # DATA.TABLE: Doesn't need the comma
DT_comp$Fruit[DT_comp$Fruit == "orange"] # BASE equivalent
DT_comp[DT_comp$Fruit == "orange", ] # BASE equivalent
filter(DT_comp, Fruit == "orange") # DPLYR equivalent
DT[Fruit == "banana" & Year == "2008"] # interestingly it can filter the year column as both a string and numeric
DT[Fruit == "banana" & Year == 2008]
DT[order(Fruit)] # DATA.TABLE
DT_comp[order(DT_comp$Fruit), ] # BASE equivalent
arrange(DT_comp, Fruit) # DPLYR equivalent
DT[order(Fruit, -Year)] # order according to the Fruit and Year columns, in ascending and descending order, respectively
DT[sample(.N, 3), ] # randomly sample three rows, where .N is the shortcut for nrow(DF)
DT_comp[sample(nrow(DT_comp), 3), ] # base equivalent
DT[, c(Fruit, Count)] # select two cols, but returns one vector. Needs l() to return data.frame
DT[, list(Fruit, Count)] # DATA.TABLE select two cols and return data frame
DT[, .(Fruit, Count)] # Conveniently they've provided a shortcut for list(). Note that there MUST be a bracket for this to work.
DT_comp[, c("Fruit", "Count")] # BASE equivalent
select(DT_comp, Fruit, Count) # DPLYR equivalent
DT[, .(sum(Count))] # DATA.TABLE: directly apply the function in the index.
DT[, .(CumsumCount = cumsum(Count))] # DATA.TABLE: add column name within list(). Note that you can't assign column names outside of list() because it wouldn't be a data.frame without it
data.frame(CumsumCount = cumsum(DT_comp[, "Count"])) # BASE equivalent
summarise(DT_comp, CumsumCount = cumsum(Count)) # DPLYR equivalent
# Task: to filter to apple, calculate the cumsum and assign to new column, then sum the cumsum column.
DT[Fruit != "apple", Cumsum := cumsum(Count)] # DATA.TABLE
DT[, sum(Cumsum, na.rm = TRUE)]
DT <- data.table(reset())
# A more "vertical" way of writing the above:
DT[
Fruit != "apple", Cumsum := cumsum(Count)
][,
sum(Cumsum, na.rm = TRUE)
]
{sum123 <- sum(1:3); 1 + 2; sum123}
library(httr)
# The CONNECT_SERVER URL must have a trailing slash.
connectServer <- "https://hertscc.managed.mango-solutions.com/connect/"
connectAPIKey <- Sys.getenv("CONNECT_API_KEY")
library(httr)
# The CONNECT_SERVER URL must have a trailing slash.
connectServer <- Sys.getenv("CONNECT_SERVER")
connectAPIKey <- Sys.getenv("CONNECT_API_KEY")
connectServer
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=100"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
payload
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
pins_results2
library(httr)
# The CONNECT_SERVER URL must have a trailing slash.
connectServer <- Sys.getenv("CONNECT_SERVER")
connectServer
connectAPIKey <- Sys.getenv("CONNECT_API_KEY")
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=100"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
payload
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
pins_results2
View(pins_results2)
class(pins_results2)
View(pins_results2)
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=1000"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298 "),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
results
View(results)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users/limit=100"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users/limit=100"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
response
View(response)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
View(response)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users/page_size=50"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
content(response)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users?page_size=50"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
View(results)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users?page_size=100"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
View(results)
# make the query request
response <- GET(
paste0(connectServer, "__api__/v1/users?page_size=200"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- do.call(rbind.data.frame, content(response)$results)
View(results)
results <- data.table::rbindlist(content(response)$results)
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=800&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=501&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=50&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
# Request a page of up to 25 visitation records.
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
results[, .(1, 2, 5, "guid")]
results[, c(1, 2, 5, "guid")]
results[, c("email", "username", "user_role", "guid")]
results <- results[, c("email", "username", "user_role", "guid")]
View(results)
users <- results[, c("email", "username", "user_role", "guid")]
# Get all content
resp <- GET(
paste0(connectServer, "__api__/v1/content"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- data.table::rbindlist(content(response)$results)
View(results)
results <- data.table::rbindlist(content(resp)$results)
# Get all content
resp <- GET(
paste0(connectServer, "__api__/v1/content/"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
results <- data.table::rbindlist(content(resp)$results)
content(resp)
results <- data.table::rbindlist(content(resp))
View(results)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
board <- board_rsconnect(server =  Sys.getenv("CONNECT_SERVER"),
key = Sys.getenv("CONNECT_API_KEY"))
board <- pins::board_rsconnect(server =  Sys.getenv("CONNECT_SERVER"),
key = Sys.getenv("CONNECT_API_KEY"))
t = pins::pin_read(board, "mwhelan/epi_proj_mangement")
t = pins::pin_read(board, "epi_proj_mangement")
t = pins::pin_read(board, "wyuill/epi_proj_mangement")
View(t)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
pins::pin_write(t, "epi_proj_mangement")
pins::pin_write(board, t, "epi_proj_mangement")
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
t = pins::pin_read(board, "wyuill/epi_proj_mangement")
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
payload$results
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/content/a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/content/a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
payload
# print the current page results
pins_results2 <- data.table::rbindlist(payload)
payload <- content(resp)
View(payload)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/experimental/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
payload <- content(resp)
View(payload)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/experimental/content/content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(payload)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/experimental/content/a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
View(payload)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/experimental/content/a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
# Get all visitations per pin
resp <- GET(
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z"),
add_headers(Authorization = paste("Key", connectAPIKey))
)
payload <- content(resp)
# print the current page results
pins_results2 <- data.table::rbindlist(payload$results)
View(pins_results2)
paste0(connectServer, "__api__/v1/instrumentation/content/visits?limit=500&content_guid=a7dac203-d5d1-4617-ab03-113ee9f1f298&from=2022-10-04T18:00:00Z&to=2022-10-05T18:00:00Z")
View(pins_results2)
rstudioapi::getActiveProject()
sub('.*/', '', rstudioapi::getActiveProject())
box::use(../../phei-functions/phei)
box::use(../../phei_functions/phei)
box::use(../phei_functions/phei)
box::use(../phei_functions/fingertips)
box::use(../../phei_functions/fingertips)
box::use(../../phei_functions/phei)
box::use(../../phei_functions/phei)
library(kingpin)
board <- kingpin::board_rsconnect(server = Sys.getenv("CONNECT_SERVER"), key = Sys.getenv("CONNECT_API_KEY"))
pin_pit <- kingpin::pin_return(board, "pin_pit")
View(pin_pit)
board <- kingpin::board_rsconnect(Sys.getenv("CONNECT_SERVER"), Sys.getenv("CONNECT_API_KEY"))
library(kingpin)
pin_throw(board, iris, "test_itis")
pin_throw(board, iris, "vaccine_date")
t =readRDS("S:/SHARE/PH EI/_CONNECT EXPORT/edickson_c19_vacc_sankey_age.Rds")
View(t)
pin_throw(board, t, "c19_vacc_sankey_age", comment = "Data for vaccine sankey graph: breakdown by age")
t =readRDS("S:/SHARE/PH EI/_CONNECT EXPORT/edickson_c19_vacc_sankey_area.Rds")
View(t)
pin_throw(board, t, "c19_vacc_sankey_area", comment = "Data for vaccine sankey graph: breakdown by district")
t =readRDS("S:/SHARE/PH EI/_CONNECT EXPORT/edickson_c19_vacc_sankey_eth.Rds")
View(t)
tt=pin_return(board, "c19_vacc_sankey_area")
View(tt)
pin_throw(board, t, "c19_vacc_sankey_eth", comment = "Data for vaccine sankey graph: breakdown by ethnicity")
